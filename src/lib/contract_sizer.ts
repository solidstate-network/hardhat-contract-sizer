import type {
  ContractSizerConfig,
  OutputItem,
  SolcSettings,
} from '../types.js';
import { DEPLOYED_SIZE_LIMIT, INIT_SIZE_LIMIT } from './constants.js';
import fs from 'fs';
import type { HookContext } from 'hardhat/types/hooks';

const getArtifacts = async (
  context: HookContext,
  config: ContractSizerConfig,
) => {
  // get list of all contracts and filter according to configuraiton

  const fullNames = Array.from(
    await context.artifacts.getAllFullyQualifiedNames(),
  ).filter((fullName) => {
    if (config.only.length && !config.only.some((m) => fullName.match(m)))
      return false;
    if (config.except.length && config.except.some((m) => fullName.match(m)))
      return false;
    return true;
  });

  // get contract artifacts

  const artifacts = await Promise.all(
    fullNames.map((fullName) => context.artifacts.readArtifact(fullName)),
  );

  return artifacts;
};

export const sizeContracts = async (
  context: HookContext,
  config: ContractSizerConfig,
) => {
  const DEFAULT_SOLC_SETTINGS: SolcSettings = {
    solcVersion: 'unknown',
    optimizer: false,
    runs: 0,
  };

  const artifacts = await getArtifacts(context, config);

  // get the solc settings used for each artifact, indexed by build info id

  const buildInfoSolcSettings: {
    [buildInfoId: string]: SolcSettings;
  } = {};

  await Promise.all(
    artifacts.map(async ({ buildInfoId }) => {
      // contracts not generated by Hardhat do not have a build info id
      if (buildInfoId) {
        const buildInfoPath =
          await context.artifacts.getBuildInfoPath(buildInfoId);

        // TODO: buildInfoPath is never undefined
        const content = await fs.promises.readFile(buildInfoPath!, 'utf-8');
        const json = JSON.parse(content);

        buildInfoSolcSettings[buildInfoId] = {
          solcVersion: json.solcVersion ?? DEFAULT_SOLC_SETTINGS.solcVersion,
          optimizer:
            json.input?.settings?.optimizer?.enabled ??
            DEFAULT_SOLC_SETTINGS.optimizer,
          runs:
            json.input?.settings?.optimizer?.runs ?? DEFAULT_SOLC_SETTINGS.runs,
        };
      }
    }),
  );

  // calculate contract sizes

  const outputData: OutputItem[] = artifacts.map((artifact) => {
    const {
      sourceName,
      contractName,
      deployedBytecode,
      bytecode,
      buildInfoId,
    } = artifact;

    const deploySize = Buffer.from(
      deployedBytecode.replace(/__\$\w*\$__/g, '0'.repeat(40)).slice(2),
      'hex',
    ).length;
    const initSize = Buffer.from(
      bytecode.replace(/__\$\w*\$__/g, '0'.repeat(40)).slice(2),
      'hex',
    ).length;

    // contracts not generated by Hardhat do not have a build info id, so fallback to default solc settings
    const solcSettings =
      buildInfoSolcSettings[buildInfoId!] ?? DEFAULT_SOLC_SETTINGS;

    return {
      sourceName,
      contractName,
      deploySize,
      initSize,
      solcSettings,
    };
  });

  return outputData;
};

export const countOversizedContracts = (sizedContracts: OutputItem[]) => {
  return sizedContracts.reduce((acc, el) => {
    if (el.deploySize > DEPLOYED_SIZE_LIMIT || el.initSize > INIT_SIZE_LIMIT) {
      acc++;
    }
    return acc;
  }, 0);
};
